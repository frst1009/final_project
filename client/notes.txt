little documentation about redux:
entire state of the app is stored in the object tree in store
only way to change the state is by actions and then dispatching/sending it to the store
response of state to the action is done by reducers
reducer takes the state and action and returns new state value:
(state, action) => newState
reducer > dispatch > action > state
actions are objects
reducer is function

//rfdhsetvgzqqdpjb

todo
1.error handling 
2.forgot password---done
3.personal page
4.comment---done
5.likes---half done
6.recipe page addong place to comment---done
7.look for the cards sizes---done
8.fix buttons---done
9.add functionality to add avartar
10.get all the recipes by categories and tags
11.delete update posts, userinfo

maybes
1.all recipes
2.favorites

card code


// {obj.tags.length >= 3
//           ? obj.tags.slice(0, 3).map((tag, index) => (
//               <span key={index}>#{tag} </span>
//             ))
//           : obj.tags.map((tag, index) => (
//               <span key={index}>#{tag} </span>
//             ))}


// import React, { useEffect, useState } from 'react';
// import { Link } from 'react-router-dom';

// const Cards = () => {
//   // Replace this with actual data fetched from the server
//   const [cardsData, setCardsData] = useState([
//     {
//       id: 1,
//       title: 'Hot Deals',
//       description: 'Buy One get One free.',
//       imageUrl: "https://ca-times.brightspotcdn.com/dims4/default/78ccdc9/2147483647/strip/true/crop/1920x1080+0+0/resize/1200x675!/quality/80/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Fb1%2Ffa%2F991da28e44019f3f83d083d1a966%2Ffood-1920w-0000000.jpg",
//       link: '/blog',
//     },
//     {
//       id: 2,
//       title: 'Season-In',
//       description: 'All Weather Attire',
//       imageUrl: "https://ca-times.brightspotcdn.com/dims4/default/78ccdc9/2147483647/strip/true/crop/1920x1080+0+0/resize/1200x675!/quality/80/?url=https%3A%2F%2Fcalifornia-times-brightspot.s3.amazonaws.com%2Fb1%2Ffa%2F991da28e44019f3f83d083d1a966%2Ffood-1920w-0000000.jpg",
//       link: '/blog',
//     },
//     // Add more card data objects here...
//   ]);

//   // Fetch data from the server (useEffect, fetch, axios, etc.)
//   useEffect(() => {
//     // Fetch data from the server and setCardsData with the actual data
//     // Example:
//     // fetch('/api/cards')
//     //   .then(response => response.json())
//     //   .then(data => setCardsData(data))
//     //   .catch(error => console.error('Error fetching card data:', error));
//   }, []);

//   return (
//  <div  className="row row-cols-1 row-cols-md-2 row-cols-lg-4 g-4 p-3">
//       {/* {PRODUCTS.slice(2, 6).map((product) => ( */}
//         <div className="col mb-5"> {cardsData.map((card) => (
//         <div className="card h-100 m-auto"  key={card.id}>
//           {/* <img src={product.image} className="card-img-top img-fluid" alt="..." /> */}
//           <img src={card.imageUrl} className="img-fluid rounded-start" alt="" />
//           <div className="card-body">
//             <p className="card-text mb-2">SOmething</p> <h5 className="card-title">{card.title}</h5>
//             <div className="card-footer m-auto text-center">
//             <h2 className="card-text mb-2">{card.description}</h2>
//             <p className="price"><span className="red"></span> likes </p>
//             </div>
//             <div className="card-footer d-md-none">
//                 <div className="d-flex justify-content-between align-items-center">
//                   <Link to='shop' className='m-auto'>View products</Link>
//                 </div>
//               </div>
//           </div>
//         </div>))}
//         </div>
//     </div>
//   );
// };

// export default Cards;

// <section className="recipe-cards p-5 d-flex flex-column flex-md-row justify-content-center align-items-center align-items-md-start">
// <div className="container-xxl">
//   <div className="row">
//     {cardsData.map((card) => (
//       <div key={card.id} className="col-md-6 d-flex">
//         <div className="card m-auto mb-3">
//           <div className="row g-0">
//             <div className="col-md-4">
//               <img src={card.imageUrl} className="img-fluid rounded-start" alt="" />
//             </div>
//             <div className="col-md-8">
//               <div className="card-body">
//                 <h5 className="card-title">{card.title}</h5>
//                 <h2 className="card-text mb-2">{card.description}</h2>
//                 {/* Add more card data here */}
//                 <Link to={card.link}>
//                   <button className="mt-4">Learn more</button>
//                 </Link>
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>
//     ))}
//   </div>
// </div>
// </section>







 <form onSubmit={handleSubmit(onSubmit)}>
                {error && <p className="text-danger">{error}</p>}
                  <div className="mb-3">
                    <label htmlFor="email" className="form-label mb-3">
                      Enter Your Email address
                    </label>
                    <input
                      type="email"
                      className="form-control"
                      id="email"
                      placeholder="enter email here ..."
                      {...register("email", { required: "Add email!" })}
                    />
                    {errors.email && (
                      <p className="text-danger">{errors.email.message}</p>
                    )}
                  </div>
                  <div className="mb-3">
                    <label htmlFor="password" className="form-label mb-3">
                      Enter Your password
                    </label>
                    <input
                      type="password"
                      className="form-control"
                      id="password"
                      placeholder="enter password here..."
                      {...register("password", { required: "Add password!" })}
                    />
                    {errors.password && (
                      <p className="text-danger">{errors.password.message}</p>
                    )}
                  </div>
                  <div className="d-flex justify-content-between align-items-center mb-3">
                    <p className="m-0">Dont have an account?</p>
                    <Link to="/signup" className="form-link">
                      Sign up
                    </Link>
                  </div>
                  <div className="d-grid gap-2">
                    <button disabled={!isValid} type="submit">Login</button>
                  </div>
                </form>